// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  discordId     String        @unique @db.VarChar(18)
  email         String?       @unique
  emailVerified DateTime?
  password      String?
  avatar        String?       @default("default.webp")
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        Int           @default(1)
  refreshToken  String?       @default("")
  follows       Project[]     @relation(name: "ProjectFollowers")
  projects      Project[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  UserSession   UserSession[]
}

model UserSession {
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  refreshToken String    @unique
  os           String?
  platform     String?
  city         String?
  country      String?
  userAgent    String?
  ip           String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  revokedAt    DateTime?
}

model Project {
  id            Int               @id @default(autoincrement())
  name          String
  summary       String
  slug          String            @unique
  type          ProjectType       @default(BLUEPRINT)
  visibility    ProjectVisibility @default(PUBLIC)
  status        ProjectStatus?    @default(DRAFT)
  icon          String?           @default("default.webp")
  bannerId      Int?              @unique
  banner        ProjectImage?     @relation(fields: [bannerId], references: [id], name: "ProjectBanner")
  description   String?           @default("Please add a description")
  category      Category?         @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  tags          Tag[]
  fileUrl       String?           @default("")
  downloads     Int               @default(0)
  ownerId       Int
  folowers      User[]            @relation(name: "ProjectFollowers")
  owner         User              @relation(fields: [ownerId], references: [id])
  galleryImages ProjectImage[]    @relation(name: "ProjectImages")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  deletedAt     DateTime?
}

model ProjectImage {
  id          Int       @id @default(autoincrement())
  title       String
  description String?   @default("")
  url         String
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id], name: "ProjectImages")
  bannerOf    Project?  @relation(name: "ProjectBanner")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Role {
  id          Int       @id @default(autoincrement())
  name        String
  permissions String[]  @default([])
  users       User[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Tag {
  id          Int         @id @default(autoincrement())
  icon        String?     @default("default.svg")
  name        String      @unique
  projects    Project[]
  projectType ProjectType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
}

model Category {
  id          Int         @id @default(autoincrement())
  icon        String?     @default("default.svg")
  name        String      @unique
  projectType ProjectType
  projects    Project[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum ProjectStatus {
  DRAFT
  MODERATION
  PUBLISHED
}

enum ProjectType {
  BLUEPRINT
  SCRIPT
  THEME
}
